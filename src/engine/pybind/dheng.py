# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dheng', [dirname(__file__)])
        except ImportError:
            import _dheng
            return _dheng
        if fp is not None:
            try:
                _mod = imp.load_module('_dheng', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dheng = swig_import_helper()
    del swig_import_helper
else:
    import _dheng
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


CORE_INIT_TRACEMEM = _dheng.CORE_INIT_TRACEMEM
CORE_INIT_CRASHDUMP = _dheng.CORE_INIT_CRASHDUMP
CORE_INIT_LOGGER = _dheng.CORE_INIT_LOGGER
CORE_INIT_ERRORS = _dheng.CORE_INIT_ERRORS
CORE_INIT_JSON = _dheng.CORE_INIT_JSON
CORE_INIT_FILEIO = _dheng.CORE_INIT_FILEIO
CORE_INIT_TIMER = _dheng.CORE_INIT_TIMER
CORE_INIT_ALL = _dheng.CORE_INIT_ALL

def core_init(*args):
  return _dheng.core_init(*args)
core_init = _dheng.core_init

def core_release(*args):
  return _dheng.core_release(*args)
core_release = _dheng.core_release
LOG_TEXT = _dheng.LOG_TEXT
LOG_ERROR = _dheng.LOG_ERROR
LOG_WARNING = _dheng.LOG_WARNING
LOG_INFO = _dheng.LOG_INFO
LOG_LOAD = _dheng.LOG_LOAD

def log_outputconsole(*args):
  return _dheng.log_outputconsole(*args)
log_outputconsole = _dheng.log_outputconsole

def log_outputfile(*args):
  return _dheng.log_outputfile(*args)
log_outputfile = _dheng.log_outputfile

def log_outputdebugger(*args):
  return _dheng.log_outputdebugger(*args)
log_outputdebugger = _dheng.log_outputdebugger
RET_OK = _dheng.RET_OK
RET_FAIL = _dheng.RET_FAIL

def err_print(*args):
  return _dheng.err_print(*args)
err_print = _dheng.err_print

def err_getcode():
  return _dheng.err_getcode()
err_getcode = _dheng.err_getcode

def err_sendtolog(*args):
  return _dheng.err_sendtolog(*args)
err_sendtolog = _dheng.err_sendtolog

def err_getstring():
  return _dheng.err_getstring()
err_getstring = _dheng.err_getstring

def err_clear():
  return _dheng.err_clear()
err_clear = _dheng.err_clear

def err_haserrors():
  return _dheng.err_haserrors()
err_haserrors = _dheng.err_haserrors

def math_torad(*args):
  return _dheng.math_torad(*args)
math_torad = _dheng.math_torad

def math_todeg(*args):
  return _dheng.math_todeg(*args)
math_todeg = _dheng.math_todeg

def math_isequal(*args):
  return _dheng.math_isequal(*args)
math_isequal = _dheng.math_isequal

def fio_addvdir(*args):
  return _dheng.fio_addvdir(*args)
fio_addvdir = _dheng.fio_addvdir

def fio_clearvdirs():
  return _dheng.fio_clearvdirs()
fio_clearvdirs = _dheng.fio_clearvdirs

def hash_murmur32(*args):
  return _dheng.hash_murmur32(*args)
hash_murmur32 = _dheng.hash_murmur32

def str_toptr(*args):
  return _dheng.str_toptr(*args)
str_toptr = _dheng.str_toptr
class vec2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _dheng.vec2i_x_set
    __swig_getmethods__["x"] = _dheng.vec2i_x_get
    if _newclass:x = _swig_property(_dheng.vec2i_x_get, _dheng.vec2i_x_set)
    __swig_setmethods__["y"] = _dheng.vec2i_y_set
    __swig_getmethods__["y"] = _dheng.vec2i_y_get
    if _newclass:y = _swig_property(_dheng.vec2i_y_get, _dheng.vec2i_y_set)
    def __init__(self): 
        this = _dheng.new_vec2i()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dheng.delete_vec2i
    __del__ = lambda self : None;
vec2i_swigregister = _dheng.vec2i_swigregister
vec2i_swigregister(vec2i)

class vec4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec4f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _dheng.vec4f_x_set
    __swig_getmethods__["x"] = _dheng.vec4f_x_get
    if _newclass:x = _swig_property(_dheng.vec4f_x_get, _dheng.vec4f_x_set)
    __swig_setmethods__["y"] = _dheng.vec4f_y_set
    __swig_getmethods__["y"] = _dheng.vec4f_y_get
    if _newclass:y = _swig_property(_dheng.vec4f_y_get, _dheng.vec4f_y_set)
    __swig_setmethods__["z"] = _dheng.vec4f_z_set
    __swig_getmethods__["z"] = _dheng.vec4f_z_get
    if _newclass:z = _swig_property(_dheng.vec4f_z_get, _dheng.vec4f_z_set)
    __swig_setmethods__["w"] = _dheng.vec4f_w_set
    __swig_getmethods__["w"] = _dheng.vec4f_w_get
    if _newclass:w = _swig_property(_dheng.vec4f_w_get, _dheng.vec4f_w_set)
    def __init__(self): 
        this = _dheng.new_vec4f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dheng.delete_vec4f
    __del__ = lambda self : None;
vec4f_swigregister = _dheng.vec4f_swigregister
vec4f_swigregister(vec4f)


def vec3_setf(*args):
  return _dheng.vec3_setf(*args)
vec3_setf = _dheng.vec3_setf
MSAA_NONE = _dheng.MSAA_NONE
MSAA_2X = _dheng.MSAA_2X
MSAA_4X = _dheng.MSAA_4X
MSAA_8X = _dheng.MSAA_8X
TEXTURE_QUALITY_HIGH = _dheng.TEXTURE_QUALITY_HIGH
TEXTURE_QUALITY_NORMAL = _dheng.TEXTURE_QUALITY_NORMAL
TEXTURE_QUALITY_LOW = _dheng.TEXTURE_QUALITY_LOW
TEXTURE_QUALITY_HIGHEST = _dheng.TEXTURE_QUALITY_HIGHEST
TEXTURE_FILTER_TRILINEAR = _dheng.TEXTURE_FILTER_TRILINEAR
TEXTURE_FILTER_BILINEAR = _dheng.TEXTURE_FILTER_BILINEAR
TEXTURE_FILTER_ANISO2X = _dheng.TEXTURE_FILTER_ANISO2X
TEXTURE_FILTER_ANISO4X = _dheng.TEXTURE_FILTER_ANISO4X
TEXTURE_FILTER_ANISO8X = _dheng.TEXTURE_FILTER_ANISO8X
TEXTURE_FILTER_ANISO16X = _dheng.TEXTURE_FILTER_ANISO16X
SHADING_QUALITY_LOW = _dheng.SHADING_QUALITY_LOW
SHADING_QUALITY_NORMAL = _dheng.SHADING_QUALITY_NORMAL
SHADING_QUALITY_HIGH = _dheng.SHADING_QUALITY_HIGH
GFX_HWVER_UNKNOWN = _dheng.GFX_HWVER_UNKNOWN
GFX_HWVER_D3D11_0 = _dheng.GFX_HWVER_D3D11_0
GFX_HWVER_D3D10_1 = _dheng.GFX_HWVER_D3D10_1
GFX_HWVER_D3D10_0 = _dheng.GFX_HWVER_D3D10_0
GFX_HWVER_GL4_3 = _dheng.GFX_HWVER_GL4_3
GFX_HWVER_GL4_2 = _dheng.GFX_HWVER_GL4_2
GFX_HWVER_GL4_1 = _dheng.GFX_HWVER_GL4_1
GFX_HWVER_GL4_0 = _dheng.GFX_HWVER_GL4_0
GFX_HWVER_GL3_3 = _dheng.GFX_HWVER_GL3_3
GFX_HWVER_GL3_2 = _dheng.GFX_HWVER_GL3_2
GFX_FLAG_FULLSCREEN = _dheng.GFX_FLAG_FULLSCREEN
GFX_FLAG_VSYNC = _dheng.GFX_FLAG_VSYNC
GFX_FLAG_DEBUG = _dheng.GFX_FLAG_DEBUG
GFX_FLAG_FXAA = _dheng.GFX_FLAG_FXAA
GFX_FLAG_REBUILDSHADERS = _dheng.GFX_FLAG_REBUILDSHADERS
ENG_FLAG_DEBUG = _dheng.ENG_FLAG_DEBUG
ENG_FLAG_DEV = _dheng.ENG_FLAG_DEV
ENG_FLAG_EDITOR = _dheng.ENG_FLAG_EDITOR
ENG_FLAG_CONSOLE = _dheng.ENG_FLAG_CONSOLE
ENG_FLAG_DISABLEPHX = _dheng.ENG_FLAG_DISABLEPHX
ENG_FLAG_DISABLEBGLOAD = _dheng.ENG_FLAG_DISABLEBGLOAD
class dev_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dev_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dev_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fpsgraph_max"] = _dheng.dev_params_fpsgraph_max_set
    __swig_getmethods__["fpsgraph_max"] = _dheng.dev_params_fpsgraph_max_get
    if _newclass:fpsgraph_max = _swig_property(_dheng.dev_params_fpsgraph_max_get, _dheng.dev_params_fpsgraph_max_set)
    __swig_setmethods__["ftgraph_max"] = _dheng.dev_params_ftgraph_max_set
    __swig_getmethods__["ftgraph_max"] = _dheng.dev_params_ftgraph_max_get
    if _newclass:ftgraph_max = _swig_property(_dheng.dev_params_ftgraph_max_get, _dheng.dev_params_ftgraph_max_set)
    __swig_setmethods__["webserver_port"] = _dheng.dev_params_webserver_port_set
    __swig_getmethods__["webserver_port"] = _dheng.dev_params_webserver_port_get
    if _newclass:webserver_port = _swig_property(_dheng.dev_params_webserver_port_get, _dheng.dev_params_webserver_port_set)
    __swig_setmethods__["buffsize_data"] = _dheng.dev_params_buffsize_data_set
    __swig_getmethods__["buffsize_data"] = _dheng.dev_params_buffsize_data_get
    if _newclass:buffsize_data = _swig_property(_dheng.dev_params_buffsize_data_get, _dheng.dev_params_buffsize_data_set)
    __swig_setmethods__["buffsize_tmp"] = _dheng.dev_params_buffsize_tmp_set
    __swig_getmethods__["buffsize_tmp"] = _dheng.dev_params_buffsize_tmp_get
    if _newclass:buffsize_tmp = _swig_property(_dheng.dev_params_buffsize_tmp_get, _dheng.dev_params_buffsize_tmp_set)
    def __init__(self): 
        this = _dheng.new_dev_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dheng.delete_dev_params
    __del__ = lambda self : None;
dev_params_swigregister = _dheng.dev_params_swigregister
dev_params_swigregister(dev_params)

class gfx_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gfx_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gfx_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _dheng.gfx_params_flags_set
    __swig_getmethods__["flags"] = _dheng.gfx_params_flags_get
    if _newclass:flags = _swig_property(_dheng.gfx_params_flags_get, _dheng.gfx_params_flags_set)
    __swig_setmethods__["msaa"] = _dheng.gfx_params_msaa_set
    __swig_getmethods__["msaa"] = _dheng.gfx_params_msaa_get
    if _newclass:msaa = _swig_property(_dheng.gfx_params_msaa_get, _dheng.gfx_params_msaa_set)
    __swig_setmethods__["tex_quality"] = _dheng.gfx_params_tex_quality_set
    __swig_getmethods__["tex_quality"] = _dheng.gfx_params_tex_quality_get
    if _newclass:tex_quality = _swig_property(_dheng.gfx_params_tex_quality_get, _dheng.gfx_params_tex_quality_set)
    __swig_setmethods__["tex_filter"] = _dheng.gfx_params_tex_filter_set
    __swig_getmethods__["tex_filter"] = _dheng.gfx_params_tex_filter_get
    if _newclass:tex_filter = _swig_property(_dheng.gfx_params_tex_filter_get, _dheng.gfx_params_tex_filter_set)
    __swig_setmethods__["shading_quality"] = _dheng.gfx_params_shading_quality_set
    __swig_getmethods__["shading_quality"] = _dheng.gfx_params_shading_quality_get
    if _newclass:shading_quality = _swig_property(_dheng.gfx_params_shading_quality_get, _dheng.gfx_params_shading_quality_set)
    __swig_setmethods__["hwver"] = _dheng.gfx_params_hwver_set
    __swig_getmethods__["hwver"] = _dheng.gfx_params_hwver_get
    if _newclass:hwver = _swig_property(_dheng.gfx_params_hwver_get, _dheng.gfx_params_hwver_set)
    __swig_setmethods__["adapter_id"] = _dheng.gfx_params_adapter_id_set
    __swig_getmethods__["adapter_id"] = _dheng.gfx_params_adapter_id_get
    if _newclass:adapter_id = _swig_property(_dheng.gfx_params_adapter_id_get, _dheng.gfx_params_adapter_id_set)
    __swig_setmethods__["width"] = _dheng.gfx_params_width_set
    __swig_getmethods__["width"] = _dheng.gfx_params_width_get
    if _newclass:width = _swig_property(_dheng.gfx_params_width_get, _dheng.gfx_params_width_set)
    __swig_setmethods__["height"] = _dheng.gfx_params_height_set
    __swig_getmethods__["height"] = _dheng.gfx_params_height_get
    if _newclass:height = _swig_property(_dheng.gfx_params_height_get, _dheng.gfx_params_height_set)
    def __init__(self): 
        this = _dheng.new_gfx_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dheng.delete_gfx_params
    __del__ = lambda self : None;
gfx_params_swigregister = _dheng.gfx_params_swigregister
gfx_params_swigregister(gfx_params)

PHX_FLAG_TRACKMEM = _dheng.PHX_FLAG_TRACKMEM
PHX_FLAG_PROFILE = _dheng.PHX_FLAG_PROFILE
class phx_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, phx_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, phx_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _dheng.phx_params_flags_set
    __swig_getmethods__["flags"] = _dheng.phx_params_flags_get
    if _newclass:flags = _swig_property(_dheng.phx_params_flags_get, _dheng.phx_params_flags_set)
    __swig_setmethods__["mem_sz"] = _dheng.phx_params_mem_sz_set
    __swig_getmethods__["mem_sz"] = _dheng.phx_params_mem_sz_get
    if _newclass:mem_sz = _swig_property(_dheng.phx_params_mem_sz_get, _dheng.phx_params_mem_sz_set)
    __swig_setmethods__["substeps_max"] = _dheng.phx_params_substeps_max_set
    __swig_getmethods__["substeps_max"] = _dheng.phx_params_substeps_max_get
    if _newclass:substeps_max = _swig_property(_dheng.phx_params_substeps_max_get, _dheng.phx_params_substeps_max_set)
    __swig_setmethods__["scratch_sz"] = _dheng.phx_params_scratch_sz_set
    __swig_getmethods__["scratch_sz"] = _dheng.phx_params_scratch_sz_get
    if _newclass:scratch_sz = _swig_property(_dheng.phx_params_scratch_sz_get, _dheng.phx_params_scratch_sz_set)
    def __init__(self): 
        this = _dheng.new_phx_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dheng.delete_phx_params
    __del__ = lambda self : None;
phx_params_swigregister = _dheng.phx_params_swigregister
phx_params_swigregister(phx_params)

class sct_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sct_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sct_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mem_sz"] = _dheng.sct_params_mem_sz_set
    __swig_getmethods__["mem_sz"] = _dheng.sct_params_mem_sz_get
    if _newclass:mem_sz = _swig_property(_dheng.sct_params_mem_sz_get, _dheng.sct_params_mem_sz_set)
    def __init__(self): 
        this = _dheng.new_sct_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dheng.delete_sct_params
    __del__ = lambda self : None;
sct_params_swigregister = _dheng.sct_params_swigregister
sct_params_swigregister(sct_params)

class init_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, init_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, init_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _dheng.init_params_flags_set
    __swig_getmethods__["flags"] = _dheng.init_params_flags_get
    if _newclass:flags = _swig_property(_dheng.init_params_flags_get, _dheng.init_params_flags_set)
    __swig_setmethods__["console_lines_max"] = _dheng.init_params_console_lines_max_set
    __swig_getmethods__["console_lines_max"] = _dheng.init_params_console_lines_max_get
    if _newclass:console_lines_max = _swig_property(_dheng.init_params_console_lines_max_get, _dheng.init_params_console_lines_max_set)
    __swig_setmethods__["gfx"] = _dheng.init_params_gfx_set
    __swig_getmethods__["gfx"] = _dheng.init_params_gfx_get
    if _newclass:gfx = _swig_property(_dheng.init_params_gfx_get, _dheng.init_params_gfx_set)
    __swig_setmethods__["dev"] = _dheng.init_params_dev_set
    __swig_getmethods__["dev"] = _dheng.init_params_dev_get
    if _newclass:dev = _swig_property(_dheng.init_params_dev_get, _dheng.init_params_dev_set)
    __swig_setmethods__["phx"] = _dheng.init_params_phx_set
    __swig_getmethods__["phx"] = _dheng.init_params_phx_get
    if _newclass:phx = _swig_property(_dheng.init_params_phx_get, _dheng.init_params_phx_set)
    __swig_setmethods__["sct"] = _dheng.init_params_sct_set
    __swig_getmethods__["sct"] = _dheng.init_params_sct_get
    if _newclass:sct = _swig_property(_dheng.init_params_sct_get, _dheng.init_params_sct_set)
    __swig_setmethods__["data_path"] = _dheng.init_params_data_path_set
    __swig_getmethods__["data_path"] = _dheng.init_params_data_path_get
    if _newclass:data_path = _swig_property(_dheng.init_params_data_path_get, _dheng.init_params_data_path_set)
    def __init__(self): 
        this = _dheng.new_init_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dheng.delete_init_params
    __del__ = lambda self : None;
init_params_swigregister = _dheng.init_params_swigregister
init_params_swigregister(init_params)


def app_init(*args):
  return _dheng.app_init(*args)
app_init = _dheng.app_init

def app_release():
  return _dheng.app_release()
app_release = _dheng.app_release

def app_load_config(*args):
  return _dheng.app_load_config(*args)
app_load_config = _dheng.app_load_config

def app_defaultconfig():
  return _dheng.app_defaultconfig()
app_defaultconfig = _dheng.app_defaultconfig

def app_query_displaymodes():
  return _dheng.app_query_displaymodes()
app_query_displaymodes = _dheng.app_query_displaymodes

def app_free_displaymodes(*args):
  return _dheng.app_free_displaymodes(*args)
app_free_displaymodes = _dheng.app_free_displaymodes

def app_swapbuffers():
  return _dheng.app_swapbuffers()
app_swapbuffers = _dheng.app_swapbuffers

def app_set_rendertarget(*args):
  return _dheng.app_set_rendertarget(*args)
app_set_rendertarget = _dheng.app_set_rendertarget

def app_resize_window(*args):
  return _dheng.app_resize_window(*args)
app_resize_window = _dheng.app_resize_window

def app_add_rendertarget(*args):
  return _dheng.app_add_rendertarget(*args)
app_add_rendertarget = _dheng.app_add_rendertarget

def eng_init(*args):
  return _dheng.eng_init(*args)
eng_init = _dheng.eng_init

def eng_release():
  return _dheng.eng_release()
eng_release = _dheng.eng_release

def eng_update():
  return _dheng.eng_update()
eng_update = _dheng.eng_update
class camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, camera, name)
    __repr__ = _swig_repr
    __swig_setmethods__["look"] = _dheng.camera_look_set
    __swig_getmethods__["look"] = _dheng.camera_look_get
    if _newclass:look = _swig_property(_dheng.camera_look_get, _dheng.camera_look_set)
    __swig_setmethods__["pos"] = _dheng.camera_pos_set
    __swig_getmethods__["pos"] = _dheng.camera_pos_get
    if _newclass:pos = _swig_property(_dheng.camera_pos_get, _dheng.camera_pos_set)
    __swig_setmethods__["fnear"] = _dheng.camera_fnear_set
    __swig_getmethods__["fnear"] = _dheng.camera_fnear_get
    if _newclass:fnear = _swig_property(_dheng.camera_fnear_get, _dheng.camera_fnear_set)
    __swig_setmethods__["ffar"] = _dheng.camera_ffar_set
    __swig_getmethods__["ffar"] = _dheng.camera_ffar_get
    if _newclass:ffar = _swig_property(_dheng.camera_ffar_get, _dheng.camera_ffar_set)
    __swig_setmethods__["fov"] = _dheng.camera_fov_set
    __swig_getmethods__["fov"] = _dheng.camera_fov_get
    if _newclass:fov = _swig_property(_dheng.camera_fov_get, _dheng.camera_fov_set)
    __swig_setmethods__["aspect"] = _dheng.camera_aspect_set
    __swig_getmethods__["aspect"] = _dheng.camera_aspect_get
    if _newclass:aspect = _swig_property(_dheng.camera_aspect_get, _dheng.camera_aspect_set)
    def __init__(self): 
        this = _dheng.new_camera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dheng.delete_camera
    __del__ = lambda self : None;
camera_swigregister = _dheng.camera_swigregister
camera_swigregister(camera)


def cam_init(*args):
  return _dheng.cam_init(*args)
cam_init = _dheng.cam_init

def cam_set_pitchconst(*args):
  return _dheng.cam_set_pitchconst(*args)
cam_set_pitchconst = _dheng.cam_set_pitchconst

def cam_set_viewsize(*args):
  return _dheng.cam_set_viewsize(*args)
cam_set_viewsize = _dheng.cam_set_viewsize

def cam_update(*args):
  return _dheng.cam_update(*args)
cam_update = _dheng.cam_update

def cam_pitch(*args):
  return _dheng.cam_pitch(*args)
cam_pitch = _dheng.cam_pitch

def cam_yaw(*args):
  return _dheng.cam_yaw(*args)
cam_yaw = _dheng.cam_yaw

def cam_roll(*args):
  return _dheng.cam_roll(*args)
cam_roll = _dheng.cam_roll

def cam_fwd(*args):
  return _dheng.cam_fwd(*args)
cam_fwd = _dheng.cam_fwd

def cam_strafe(*args):
  return _dheng.cam_strafe(*args)
cam_strafe = _dheng.cam_strafe
CMP_OBJTYPE_UNKNOWN = _dheng.CMP_OBJTYPE_UNKNOWN
CMP_OBJTYPE_MODEL = _dheng.CMP_OBJTYPE_MODEL
CMP_OBJTYPE_PARTICLE = _dheng.CMP_OBJTYPE_PARTICLE
CMP_OBJTYPE_LIGHT = _dheng.CMP_OBJTYPE_LIGHT
CMP_OBJTYPE_DECAL = _dheng.CMP_OBJTYPE_DECAL
CMP_OBJTYPE_CAMERA = _dheng.CMP_OBJTYPE_CAMERA
CMP_OBJTYPE_TRIGGER = _dheng.CMP_OBJTYPE_TRIGGER
class cmp_obj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmp_obj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmp_obj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _dheng.cmp_obj_name_set
    __swig_getmethods__["name"] = _dheng.cmp_obj_name_get
    if _newclass:name = _swig_property(_dheng.cmp_obj_name_get, _dheng.cmp_obj_name_set)
    __swig_setmethods__["id"] = _dheng.cmp_obj_id_set
    __swig_getmethods__["id"] = _dheng.cmp_obj_id_get
    if _newclass:id = _swig_property(_dheng.cmp_obj_id_get, _dheng.cmp_obj_id_set)
    __swig_setmethods__["scene_id"] = _dheng.cmp_obj_scene_id_set
    __swig_getmethods__["scene_id"] = _dheng.cmp_obj_scene_id_get
    if _newclass:scene_id = _swig_property(_dheng.cmp_obj_scene_id_get, _dheng.cmp_obj_scene_id_set)
    __swig_setmethods__["type"] = _dheng.cmp_obj_type_set
    __swig_getmethods__["type"] = _dheng.cmp_obj_type_get
    if _newclass:type = _swig_property(_dheng.cmp_obj_type_get, _dheng.cmp_obj_type_set)
    def __init__(self): 
        this = _dheng.new_cmp_obj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dheng.delete_cmp_obj
    __del__ = lambda self : None;
cmp_obj_swigregister = _dheng.cmp_obj_swigregister
cmp_obj_swigregister(cmp_obj)


def cmp_destroy_instance(*args):
  return _dheng.cmp_destroy_instance(*args)
cmp_destroy_instance = _dheng.cmp_destroy_instance

def cmp_create_instance_forobj(*args):
  return _dheng.cmp_create_instance_forobj(*args)
cmp_create_instance_forobj = _dheng.cmp_create_instance_forobj

def cmp_findinstance_inobj(*args):
  return _dheng.cmp_findinstance_inobj(*args)
cmp_findinstance_inobj = _dheng.cmp_findinstance_inobj

def cmp_value_sets(*args):
  return _dheng.cmp_value_sets(*args)
cmp_value_sets = _dheng.cmp_value_sets

def cmp_value_setf(*args):
  return _dheng.cmp_value_setf(*args)
cmp_value_setf = _dheng.cmp_value_setf

def cmp_value_seti(*args):
  return _dheng.cmp_value_seti(*args)
cmp_value_seti = _dheng.cmp_value_seti

def cmp_value_setui(*args):
  return _dheng.cmp_value_setui(*args)
cmp_value_setui = _dheng.cmp_value_setui

def cmp_value_set4f(*args):
  return _dheng.cmp_value_set4f(*args)
cmp_value_set4f = _dheng.cmp_value_set4f

def cmp_value_set3f(*args):
  return _dheng.cmp_value_set3f(*args)
cmp_value_set3f = _dheng.cmp_value_set3f

def cmp_value_set2f(*args):
  return _dheng.cmp_value_set2f(*args)
cmp_value_set2f = _dheng.cmp_value_set2f

def cmp_value_setb(*args):
  return _dheng.cmp_value_setb(*args)
cmp_value_setb = _dheng.cmp_value_setb

def scn_create_scene(*args):
  return _dheng.scn_create_scene(*args)
scn_create_scene = _dheng.scn_create_scene

def scn_destroy_scene(*args):
  return _dheng.scn_destroy_scene(*args)
scn_destroy_scene = _dheng.scn_destroy_scene

def scn_setactive(*args):
  return _dheng.scn_setactive(*args)
scn_setactive = _dheng.scn_setactive

def scn_getactive():
  return _dheng.scn_getactive()
scn_getactive = _dheng.scn_getactive

def scn_findscene(*args):
  return _dheng.scn_findscene(*args)
scn_findscene = _dheng.scn_findscene

def scn_create_obj(*args):
  return _dheng.scn_create_obj(*args)
scn_create_obj = _dheng.scn_create_obj

def scn_destroy_obj(*args):
  return _dheng.scn_destroy_obj(*args)
scn_destroy_obj = _dheng.scn_destroy_obj

def scn_findobj(*args):
  return _dheng.scn_findobj(*args)
scn_findobj = _dheng.scn_findobj

def scn_getobj(*args):
  return _dheng.scn_getobj(*args)
scn_getobj = _dheng.scn_getobj

def wld_set_cam(*args):
  return _dheng.wld_set_cam(*args)
wld_set_cam = _dheng.wld_set_cam

def wld_get_cam():
  return _dheng.wld_get_cam()
wld_get_cam = _dheng.wld_get_cam

def gfx_set_debug_renderfunc(*args):
  return _dheng.gfx_set_debug_renderfunc(*args)
gfx_set_debug_renderfunc = _dheng.gfx_set_debug_renderfunc
gfx_render_grid = _dheng.gfx_render_grid
INPUT_MOUSEKEY_LEFT = _dheng.INPUT_MOUSEKEY_LEFT
INPUT_MOUSEKEY_RIGHT = _dheng.INPUT_MOUSEKEY_RIGHT
INPUT_MOUSEKEY_MIDDLE = _dheng.INPUT_MOUSEKEY_MIDDLE
INPUT_MOUSEKEY_PGUP = _dheng.INPUT_MOUSEKEY_PGUP
INPUT_MOUSEKEY_PGDOWN = _dheng.INPUT_MOUSEKEY_PGDOWN
INPUT_KEY_ESC = _dheng.INPUT_KEY_ESC
INPUT_KEY_F1 = _dheng.INPUT_KEY_F1
INPUT_KEY_F2 = _dheng.INPUT_KEY_F2
INPUT_KEY_F3 = _dheng.INPUT_KEY_F3
INPUT_KEY_F4 = _dheng.INPUT_KEY_F4
INPUT_KEY_F5 = _dheng.INPUT_KEY_F5
INPUT_KEY_F6 = _dheng.INPUT_KEY_F6
INPUT_KEY_F7 = _dheng.INPUT_KEY_F7
INPUT_KEY_F8 = _dheng.INPUT_KEY_F8
INPUT_KEY_F9 = _dheng.INPUT_KEY_F9
INPUT_KEY_F10 = _dheng.INPUT_KEY_F10
INPUT_KEY_F11 = _dheng.INPUT_KEY_F11
INPUT_KEY_F12 = _dheng.INPUT_KEY_F12
INPUT_KEY_PRINTSCREEN = _dheng.INPUT_KEY_PRINTSCREEN
INPUT_KEY_BREAK = _dheng.INPUT_KEY_BREAK
INPUT_KEY_TILDE = _dheng.INPUT_KEY_TILDE
INPUT_KEY_1 = _dheng.INPUT_KEY_1
INPUT_KEY_2 = _dheng.INPUT_KEY_2
INPUT_KEY_3 = _dheng.INPUT_KEY_3
INPUT_KEY_4 = _dheng.INPUT_KEY_4
INPUT_KEY_5 = _dheng.INPUT_KEY_5
INPUT_KEY_6 = _dheng.INPUT_KEY_6
INPUT_KEY_7 = _dheng.INPUT_KEY_7
INPUT_KEY_8 = _dheng.INPUT_KEY_8
INPUT_KEY_9 = _dheng.INPUT_KEY_9
INPUT_KEY_0 = _dheng.INPUT_KEY_0
INPUT_KEY_DASH = _dheng.INPUT_KEY_DASH
INPUT_KEY_EQUAL = _dheng.INPUT_KEY_EQUAL
INPUT_KEY_BACKSPACE = _dheng.INPUT_KEY_BACKSPACE
INPUT_KEY_TAB = _dheng.INPUT_KEY_TAB
INPUT_KEY_Q = _dheng.INPUT_KEY_Q
INPUT_KEY_W = _dheng.INPUT_KEY_W
INPUT_KEY_E = _dheng.INPUT_KEY_E
INPUT_KEY_R = _dheng.INPUT_KEY_R
INPUT_KEY_T = _dheng.INPUT_KEY_T
INPUT_KEY_Y = _dheng.INPUT_KEY_Y
INPUT_KEY_U = _dheng.INPUT_KEY_U
INPUT_KEY_I = _dheng.INPUT_KEY_I
INPUT_KEY_O = _dheng.INPUT_KEY_O
INPUT_KEY_P = _dheng.INPUT_KEY_P
INPUT_KEY_BRACKET_OPEN = _dheng.INPUT_KEY_BRACKET_OPEN
INPUT_KEY_BRACKET_CLOSE = _dheng.INPUT_KEY_BRACKET_CLOSE
INPUT_KEY_BACKSLASH = _dheng.INPUT_KEY_BACKSLASH
INPUT_KEY_CAPS = _dheng.INPUT_KEY_CAPS
INPUT_KEY_A = _dheng.INPUT_KEY_A
INPUT_KEY_S = _dheng.INPUT_KEY_S
INPUT_KEY_D = _dheng.INPUT_KEY_D
INPUT_KEY_F = _dheng.INPUT_KEY_F
INPUT_KEY_G = _dheng.INPUT_KEY_G
INPUT_KEY_H = _dheng.INPUT_KEY_H
INPUT_KEY_J = _dheng.INPUT_KEY_J
INPUT_KEY_K = _dheng.INPUT_KEY_K
INPUT_KEY_L = _dheng.INPUT_KEY_L
INPUT_KEY_SEMICOLON = _dheng.INPUT_KEY_SEMICOLON
INPUT_KEY_QUOTE = _dheng.INPUT_KEY_QUOTE
INPUT_KEY_ENTER = _dheng.INPUT_KEY_ENTER
INPUT_KEY_LSHIFT = _dheng.INPUT_KEY_LSHIFT
INPUT_KEY_Z = _dheng.INPUT_KEY_Z
INPUT_KEY_X = _dheng.INPUT_KEY_X
INPUT_KEY_C = _dheng.INPUT_KEY_C
INPUT_KEY_V = _dheng.INPUT_KEY_V
INPUT_KEY_B = _dheng.INPUT_KEY_B
INPUT_KEY_N = _dheng.INPUT_KEY_N
INPUT_KEY_M = _dheng.INPUT_KEY_M
INPUT_KEY_COMMA = _dheng.INPUT_KEY_COMMA
INPUT_KEY_DOT = _dheng.INPUT_KEY_DOT
INPUT_KEY_SLASH = _dheng.INPUT_KEY_SLASH
INPUT_KEY_RSHIFT = _dheng.INPUT_KEY_RSHIFT
INPUT_KEY_LCTRL = _dheng.INPUT_KEY_LCTRL
INPUT_KEY_LALT = _dheng.INPUT_KEY_LALT
INPUT_KEY_SPACE = _dheng.INPUT_KEY_SPACE
INPUT_KEY_RALT = _dheng.INPUT_KEY_RALT
INPUT_KEY_RCTRL = _dheng.INPUT_KEY_RCTRL
INPUT_KEY_DELETE = _dheng.INPUT_KEY_DELETE
INPUT_KEY_INSERT = _dheng.INPUT_KEY_INSERT
INPUT_KEY_HOME = _dheng.INPUT_KEY_HOME
INPUT_KEY_END = _dheng.INPUT_KEY_END
INPUT_KEY_PGUP = _dheng.INPUT_KEY_PGUP
INPUT_KEY_PGDWN = _dheng.INPUT_KEY_PGDWN
INPUT_KEY_UP = _dheng.INPUT_KEY_UP
INPUT_KEY_DOWN = _dheng.INPUT_KEY_DOWN
INPUT_KEY_LEFT = _dheng.INPUT_KEY_LEFT
INPUT_KEY_RIGHT = _dheng.INPUT_KEY_RIGHT
INPUT_KEY_NUM_SLASH = _dheng.INPUT_KEY_NUM_SLASH
INPUT_KEY_NUM_MULTIPLY = _dheng.INPUT_KEY_NUM_MULTIPLY
INPUT_KEY_NUM_MINUS = _dheng.INPUT_KEY_NUM_MINUS
INPUT_KEY_NUM_PLUS = _dheng.INPUT_KEY_NUM_PLUS
INPUT_KEY_NUM_ENTER = _dheng.INPUT_KEY_NUM_ENTER
INPUT_KEY_NUM_DOT = _dheng.INPUT_KEY_NUM_DOT
INPUT_KEY_NUM_1 = _dheng.INPUT_KEY_NUM_1
INPUT_KEY_NUM_2 = _dheng.INPUT_KEY_NUM_2
INPUT_KEY_NUM_3 = _dheng.INPUT_KEY_NUM_3
INPUT_KEY_NUM_4 = _dheng.INPUT_KEY_NUM_4
INPUT_KEY_NUM_5 = _dheng.INPUT_KEY_NUM_5
INPUT_KEY_NUM_6 = _dheng.INPUT_KEY_NUM_6
INPUT_KEY_NUM_7 = _dheng.INPUT_KEY_NUM_7
INPUT_KEY_NUM_8 = _dheng.INPUT_KEY_NUM_8
INPUT_KEY_NUM_9 = _dheng.INPUT_KEY_NUM_9
INPUT_KEY_NUM_0 = _dheng.INPUT_KEY_NUM_0
INPUT_KEY_NUM_LOCK = _dheng.INPUT_KEY_NUM_LOCK
INPUT_KEY_CNT = _dheng.INPUT_KEY_CNT

def input_mouse_getpos(*args):
  return _dheng.input_mouse_getpos(*args)
input_mouse_getpos = _dheng.input_mouse_getpos

def input_mouse_getkey(*args):
  return _dheng.input_mouse_getkey(*args)
input_mouse_getkey = _dheng.input_mouse_getkey

def input_kb_getkey(*args):
  return _dheng.input_kb_getkey(*args)
input_kb_getkey = _dheng.input_kb_getkey

def input_update():
  return _dheng.input_update()
input_update = _dheng.input_update

def sct_runfile(*args):
  return _dheng.sct_runfile(*args)
sct_runfile = _dheng.sct_runfile

def cmp_anim_getframecnt(*args):
  return _dheng.cmp_anim_getframecnt(*args)
cmp_anim_getframecnt = _dheng.cmp_anim_getframecnt

def cmp_anim_play(*args):
  return _dheng.cmp_anim_play(*args)
cmp_anim_play = _dheng.cmp_anim_play

def cmp_anim_stop(*args):
  return _dheng.cmp_anim_stop(*args)
cmp_anim_stop = _dheng.cmp_anim_stop

def cmp_anim_isplaying(*args):
  return _dheng.cmp_anim_isplaying(*args)
cmp_anim_isplaying = _dheng.cmp_anim_isplaying

def cmp_anim_getcurframe(*args):
  return _dheng.cmp_anim_getcurframe(*args)
cmp_anim_getcurframe = _dheng.cmp_anim_getcurframe

def cmp_anim_getfps(*args):
  return _dheng.cmp_anim_getfps(*args)
cmp_anim_getfps = _dheng.cmp_anim_getfps
# This file is compatible with both classic and new-style classes.


